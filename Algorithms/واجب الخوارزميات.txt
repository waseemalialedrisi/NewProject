#Algorithm 1:euclip(m,n)
#while n != 0 do
#    r <--- m mod n
#    m <--- n
#    n <--- r
#return m

#def euclip(m,n):
#    while n != 0:
#        r = m/n
#        m = n
#        n = r
#    return m
#print(euclip(20,10))

#Algorithm 2: fip(n)
# A[0]<--- 0, A[1]<--- 1
# for i <--- 2 to n do
#     A[i]<--- A[i-1] + A[1-2]
# return A[n]

#def fip(n):
#    A=[]
#    A.append(0)
#    A.append(1)
#    for i in range(2,n):
#        A.append(A[i-1]+A[i-2])
#    return A
#print(fip(22))

#Algorithm 3: Sequential_Searsh(A[0..n-1],k)
# i <--- 1
# while i < n and A[i] != k do
#      i<--- i+1
# if i<n
#     return i
# else
#     return -1

#def Sequential_Searsh(A,k):
#    i=0
#    n=A.__len__()
#    while i < n and A[i] != k:
#        i = i +1
#    if i < n:
#        return i
#    else:
#        return -1
#a=[5,6,2,3,4,8,7,9,1,0]
#print(Sequential_Searsh(a,8))

'''
Algorithm 4: MaxElement(A[0..n-1])
maxval <--- A[0]
for i <--- 1 to n - 1 do
    if A[i] > maxval then
        maxval <--- A[i]
return maxval
'''

'''
def MaxElement(A):
    maxval = A[0]
    for i in range(1, A.__len__()-1):
        if A[i] > maxval:
            maxval = A[i]
    return maxval
A=[10,5,7,8,9,66,4,33,5,2,11,12,44,1,3]
print(MaxElement(A))
'''

'''
Algorithm 5: UniqueElements(A[0..n-1])
for i <--- 0 to n-2 do
    for j <--- 0 to n-1 do
        if A[i]=A[j] then return false
return true        
'''

'''
def UniqueElements(A):
    n=A.__len__()
    for i in range(0,n-2):
        for j in range(i+1,n-1):
            if A[i] == A[j]:
                return False
    return True
A=[1,2,3,4,5,6,7,8,9,10]
print(UniqueElements(A))
'''

'''
Algorithm 6: Binary(n)
count <--- 1
while n > 1 do
    count <--- count + 1
    n <--- |_ n/2 _|
return count    
'''

'''
def Binary(n):
    count = 1
    while n > 1:
        count = count + 1
        n = n/2
    return count
print(Binary(222))
'''

'''
Algorithm 7: F(n)
if n = 0 then
    return 1
else
    return F(n-1) * n    
'''

'''
def F(n):
    if n == 0:
        return 1
    else:
        return F(n-1) * n
print(F(6))
'''

'''
Algorithm 8: BinRec(n)
if n = 1 then
    return 1
else
    BinRec(n/2)+1    
'''

'''
def BinRec(n):
    if n == 1:
        return 1
    else:
        return BinRec(n//2)+1
print(BinRec(5))
'''

'''
Algorithm 8: Fip(n)   الاستدعاء الذاتي
if n <= 1 then
    return n
else
    return Fip(n-1)+Fip(n-2)    
'''

'''
def Fip(n):
    if n <= 1:
        return n
    else:
        return Fip(n-1)+Fip(n-2)
print(Fip(10))
'''

'''
Algorithm 9: SelectionSort(A[0..n-1])
for i <--- 0 to n-2 do
    min <--- i
    for j <--- i+1 to n-1 do    في  هذه الحلقة يكون الدوران الى الان وليس الى الان ناقص واحد لانة لن يرتب العنصر الاخير
        if A[j] < A[min] then
            min <--- j
    swap A[i] and A[min]
return A[n]            
'''

'''
def SelectionSort(A):
    n = A.__len__()
    for i in range(0,n-2):
        Min = i
        for j in range(i+1,n):
            if A[j] < A[Min]:
                Min = j
        x=A[i]
        A[i]=A[Min]
        A[Min]=x
    return A
A=[2,3,4,1,9,7,6,5,8,11,45,65,75,84,32,43]
print(SelectionSort(A))
'''